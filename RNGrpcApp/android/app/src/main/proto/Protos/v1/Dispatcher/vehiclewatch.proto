syntax = "proto3";

import "google/protobuf/empty.proto";
import "Protos/v1/Dispatcher/supply.proto";

//csharp_namespace needs to be written for each system
option csharp_namespace = "Protos.v1.Dispatcher";

package vehiclewatch;

// The greeting service definition.
service VehicleWatcher{
    rpc SetVehicleArrival(VehicleArrivalRequest) returns (VehicleArrivalReply);
    rpc SetVehicleLocation(VehicleLocationRequest) returns (google.protobuf.Empty);
}
message VehicleArrivalRequest{
    string supply_id = 1; // 클라이언트 측에서 idx로 관리하더라도 엔진에서는 차량의 ID.
    int32 region_code = 2;
    //int32 waypoint_seq = 3;
    // 첫번째 정류장인지 내부 유효성검사 존재.
    string arrival_station_id = 4;
    repeated string noshow_demand_ids = 5;
}
message VehicleArrivalReply{
    repeated QueueInform processed_queues = 1;
    supply.Supply supply_info = 2;
    message QueueInform{
        // QueueState값에 따라 demand_id는 존재하지 않을 수 있습니다.
        string demand_id = 1;
        supply.Supply.RoutingQueue.QueueState queue_state = 2 ;
    }
}

message VehicleLocationRequest{
    repeated VehicleLocation locations = 1;
}

message VehicleLocation{
    string supply_id = 1;
    int32 region_code = 2;
    LngLat location = 3;
}

// Common Type for Coordinate
message LngLat {
    double lng = 1;
    double lat = 2;
}