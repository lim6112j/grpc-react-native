//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cielService.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Frontend_UserServiceClient`, then call methods of this protocol to make API calls.
internal protocol Frontend_UserServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Frontend_UserServiceClientInterceptorFactoryProtocol? { get }

  func getUserState(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?,
    handler: @escaping (Frontend_UserStateResponse) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Frontend_UserStateResponse>
}

extension Frontend_UserServiceClientProtocol {
  internal var serviceName: String {
    return "frontend.UserService"
  }

  /// Server streaming call to GetUserState
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUserState.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getUserState(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (Frontend_UserStateResponse) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Frontend_UserStateResponse> {
    return self.makeServerStreamingCall(
      path: "/frontend.UserService/GetUserState",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserStateInterceptors() ?? [],
      handler: handler
    )
  }
}

internal protocol Frontend_UserServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getUserState'.
  func makeGetUserStateInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Frontend_UserStateResponse>]
}

internal final class Frontend_UserServiceClient: Frontend_UserServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Frontend_UserServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the frontend.UserService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Frontend_UserServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate `Frontend_SupplyServiceClient`, then call methods of this protocol to make API calls.
internal protocol Frontend_SupplyServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Frontend_SupplyServiceClientInterceptorFactoryProtocol? { get }

  func getSupplyState(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?,
    handler: @escaping (Frontend_SupplyStateResponse) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Frontend_SupplyStateResponse>

  func setSupplyLocation(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<Frontend_SupplyLocationRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getSupplyLocation(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<Frontend_GetSupplyLocationRequest, Frontend_SupplyLocationResponse>
}

extension Frontend_SupplyServiceClientProtocol {
  internal var serviceName: String {
    return "frontend.SupplyService"
  }

  /// Server streaming call to GetSupplyState
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSupplyState.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getSupplyState(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (Frontend_SupplyStateResponse) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Frontend_SupplyStateResponse> {
    return self.makeServerStreamingCall(
      path: "/frontend.SupplyService/GetSupplyState",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSupplyStateInterceptors() ?? [],
      handler: handler
    )
  }

  /// Client streaming call to SetSupplyLocation
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  internal func setSupplyLocation(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<Frontend_SupplyLocationRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeClientStreamingCall(
      path: "/frontend.SupplyService/SetSupplyLocation",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetSupplyLocationInterceptors() ?? []
    )
  }

  /// Client streaming call to GetSupplyLocation
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  internal func getSupplyLocation(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<Frontend_GetSupplyLocationRequest, Frontend_SupplyLocationResponse> {
    return self.makeClientStreamingCall(
      path: "/frontend.SupplyService/GetSupplyLocation",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSupplyLocationInterceptors() ?? []
    )
  }
}

internal protocol Frontend_SupplyServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getSupplyState'.
  func makeGetSupplyStateInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Frontend_SupplyStateResponse>]

  /// - Returns: Interceptors to use when invoking 'setSupplyLocation'.
  func makeSetSupplyLocationInterceptors() -> [ClientInterceptor<Frontend_SupplyLocationRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'getSupplyLocation'.
  func makeGetSupplyLocationInterceptors() -> [ClientInterceptor<Frontend_GetSupplyLocationRequest, Frontend_SupplyLocationResponse>]
}

internal final class Frontend_SupplyServiceClient: Frontend_SupplyServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Frontend_SupplyServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the frontend.SupplyService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Frontend_SupplyServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

///rpc SetUserState(redis.UserState) returns (google.protobuf.Empty);
///rpc SetSupplyState(redis.SupplyState) returns (google.protobuf.Empty);
///
/// Usage: instantiate `Frontend_FrontEndClient`, then call methods of this protocol to make API calls.
internal protocol Frontend_FrontEndClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Frontend_FrontEndClientInterceptorFactoryProtocol? { get }

  func setDispatch(
    _ request: Frontend_FrontEndDispatchRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Frontend_FrontEndDispatchRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func setDispatchCancel(
    _ request: Frontend_SetDispatchCancelRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Frontend_SetDispatchCancelRequest, SwiftProtobuf.Google_Protobuf_Empty>
}

extension Frontend_FrontEndClientProtocol {
  internal var serviceName: String {
    return "frontend.FrontEnd"
  }

  /// Unary call to SetDispatch
  ///
  /// - Parameters:
  ///   - request: Request to send to SetDispatch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setDispatch(
    _ request: Frontend_FrontEndDispatchRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Frontend_FrontEndDispatchRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/frontend.FrontEnd/SetDispatch",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetDispatchInterceptors() ?? []
    )
  }

  ///rpc SetArrivalWaypoint(SetArrivalWaypointRequest) returns (google.protobuf.Empty);	
  ///
  /// - Parameters:
  ///   - request: Request to send to SetDispatchCancel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setDispatchCancel(
    _ request: Frontend_SetDispatchCancelRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Frontend_SetDispatchCancelRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/frontend.FrontEnd/SetDispatchCancel",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetDispatchCancelInterceptors() ?? []
    )
  }
}

internal protocol Frontend_FrontEndClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'setDispatch'.
  func makeSetDispatchInterceptors() -> [ClientInterceptor<Frontend_FrontEndDispatchRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'setDispatchCancel'.
  func makeSetDispatchCancelInterceptors() -> [ClientInterceptor<Frontend_SetDispatchCancelRequest, SwiftProtobuf.Google_Protobuf_Empty>]
}

internal final class Frontend_FrontEndClient: Frontend_FrontEndClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Frontend_FrontEndClientInterceptorFactoryProtocol?

  /// Creates a client for the frontend.FrontEnd service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Frontend_FrontEndClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate `Frontend_RoutePlannerClient`, then call methods of this protocol to make API calls.
internal protocol Frontend_RoutePlannerClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Frontend_RoutePlannerClientInterceptorFactoryProtocol? { get }

  func findPath(
    _ request: Frontend_FindPathRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Frontend_FindPathRequest, Frontend_FindPathReply>

  func findMultiPath(
    _ request: Frontend_FindMultiPathRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Frontend_FindMultiPathRequest, Frontend_FindMultiPathReply>

  func getPathEtaOfWaypoints(
    _ request: Frontend_WaypointsWithSupply,
    callOptions: CallOptions?
  ) -> UnaryCall<Frontend_WaypointsWithSupply, Frontend_PathWithEtaPerWaypoint>
}

extension Frontend_RoutePlannerClientProtocol {
  internal var serviceName: String {
    return "frontend.RoutePlanner"
  }

  /// find path, Eta of given O/D
  ///
  /// - Parameters:
  ///   - request: Request to send to FindPath.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func findPath(
    _ request: Frontend_FindPathRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Frontend_FindPathRequest, Frontend_FindPathReply> {
    return self.makeUnaryCall(
      path: "/frontend.RoutePlanner/FindPath",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFindPathInterceptors() ?? []
    )
  }

  /// Unary call to FindMultiPath
  ///
  /// - Parameters:
  ///   - request: Request to send to FindMultiPath.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func findMultiPath(
    _ request: Frontend_FindMultiPathRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Frontend_FindMultiPathRequest, Frontend_FindMultiPathReply> {
    return self.makeUnaryCall(
      path: "/frontend.RoutePlanner/FindMultiPath",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFindMultiPathInterceptors() ?? []
    )
  }

  /// Unary call to GetPathEtaOfWaypoints
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPathEtaOfWaypoints.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getPathEtaOfWaypoints(
    _ request: Frontend_WaypointsWithSupply,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Frontend_WaypointsWithSupply, Frontend_PathWithEtaPerWaypoint> {
    return self.makeUnaryCall(
      path: "/frontend.RoutePlanner/GetPathEtaOfWaypoints",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPathEtaOfWaypointsInterceptors() ?? []
    )
  }
}

internal protocol Frontend_RoutePlannerClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'findPath'.
  func makeFindPathInterceptors() -> [ClientInterceptor<Frontend_FindPathRequest, Frontend_FindPathReply>]

  /// - Returns: Interceptors to use when invoking 'findMultiPath'.
  func makeFindMultiPathInterceptors() -> [ClientInterceptor<Frontend_FindMultiPathRequest, Frontend_FindMultiPathReply>]

  /// - Returns: Interceptors to use when invoking 'getPathEtaOfWaypoints'.
  func makeGetPathEtaOfWaypointsInterceptors() -> [ClientInterceptor<Frontend_WaypointsWithSupply, Frontend_PathWithEtaPerWaypoint>]
}

internal final class Frontend_RoutePlannerClient: Frontend_RoutePlannerClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Frontend_RoutePlannerClientInterceptorFactoryProtocol?

  /// Creates a client for the frontend.RoutePlanner service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Frontend_RoutePlannerClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

